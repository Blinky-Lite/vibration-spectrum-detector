[
    {
        "id": "a7b9d689.b8a5e8",
        "type": "tab",
        "label": "Flow1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            },
            "angularTheme": {
                "primary": "indigo",
                "accents": "blue",
                "warn": "red",
                "background": "grey"
            }
        },
        "site": {
            "name": "Chill Detector",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "373e7d51.903ea2",
        "type": "serial-port",
        "z": "",
        "serialport": "/dev/ttyS0",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "1024",
        "bin": "bin",
        "out": "count",
        "addchar": true,
        "responsetimeout": "10000"
    },
    {
        "id": "9feed7f8.962788",
        "type": "websocket-listener",
        "z": "",
        "path": "/app/websocket",
        "wholemsg": "true"
    },
    {
        "id": "65e743b1.3be17c",
        "type": "serial in",
        "z": "a7b9d689.b8a5e8",
        "name": "Teensy",
        "serial": "373e7d51.903ea2",
        "x": 110,
        "y": 220,
        "wires": [
            [
                "2af394dd.443cdc",
                "9c4cbe2.b12974"
            ]
        ]
    },
    {
        "id": "4701c7b6.e07908",
        "type": "function",
        "z": "a7b9d689.b8a5e8",
        "name": "FFT",
        "func": "var digAvg = 312.5; \nvar deltaDig = 287.5;\nvar npts = msg.payload.real.length;\nfor (ii = 0; ii < npts; ++ii)\n{\n    msg.payload.real[ii] = (msg.payload.real[ii] - digAvg) / deltaDig;\n    msg.payload.imag[ii] = (msg.payload.imag[ii] - digAvg) / deltaDig;\n}\n\ntransformRadix2(msg.payload.real,msg.payload.imag);\nfor (ii = 0; ii < npts; ++ii)\n{\n    msg.payload.real[ii] = msg.payload.real[ii] / npts;\n    msg.payload.imag[ii] = msg.payload.imag[ii] / npts;\n}\nreturn {'topic':'fft', 'payload':msg.payload};\n/* https://www.nayuki.io/res/free-small-fft-in-multiple-languages/fft.js\n * Computes the discrete Fourier transform (DFT) of the given complex vector, storing the result back into the vector.\n * The vector's length must be a power of 2. Uses the Cooley-Tukey decimation-in-time radix-2 algorithm.\n */\nfunction transformRadix2(real, imag) {\n\t// Length variables\n\tvar n = real.length;\n\tif (n != imag.length)\n\t\tthrow \"Mismatched lengths\";\n\tif (n == 1)  // Trivial transform\n\t\treturn;\n\tvar levels = -1;\n\tfor (var i = 0; i < 32; i++) {\n\t\tif (1 << i == n)\n\t\t\tlevels = i;  // Equal to log2(n)\n\t}\n\tif (levels == -1)\n\t\tthrow \"Length is not a power of 2\";\n\t\n\t// Trigonometric tables\n\tvar cosTable = new Array(n / 2);\n\tvar sinTable = new Array(n / 2);\n\tfor (var i = 0; i < n / 2; i++) {\n\t\tcosTable[i] = Math.cos(2 * Math.PI * i / n);\n\t\tsinTable[i] = Math.sin(2 * Math.PI * i / n);\n\t}\n\t\n\t// Bit-reversed addressing permutation\n\tfor (var i = 0; i < n; i++) {\n\t\tvar j = reverseBits(i, levels);\n\t\tif (j > i) {\n\t\t\tvar temp = real[i];\n\t\t\treal[i] = real[j];\n\t\t\treal[j] = temp;\n\t\t\ttemp = imag[i];\n\t\t\timag[i] = imag[j];\n\t\t\timag[j] = temp;\n\t\t}\n\t}\n\t\n\t// Cooley-Tukey decimation-in-time radix-2 FFT\n\tfor (var size = 2; size <= n; size *= 2) {\n\t\tvar halfsize = size / 2;\n\t\tvar tablestep = n / size;\n\t\tfor (var i = 0; i < n; i += size) {\n\t\t\tfor (var j = i, k = 0; j < i + halfsize; j++, k += tablestep) {\n\t\t\t\tvar l = j + halfsize;\n\t\t\t\tvar tpre =  real[l] * cosTable[k] + imag[l] * sinTable[k];\n\t\t\t\tvar tpim = -real[l] * sinTable[k] + imag[l] * cosTable[k];\n\t\t\t\treal[l] = real[j] - tpre;\n\t\t\t\timag[l] = imag[j] - tpim;\n\t\t\t\treal[j] += tpre;\n\t\t\t\timag[j] += tpim;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Returns the integer whose value is the reverse of the lowest 'bits' bits of the integer 'x'.\n\tfunction reverseBits(x, bits) {\n\t\tvar y = 0;\n\t\tfor (var i = 0; i < bits; i++) {\n\t\t\ty = (y << 1) | (x & 1);\n\t\t\tx >>>= 1;\n\t\t}\n\t\treturn y;\n\t}\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 770,
        "y": 220,
        "wires": [
            [
                "e51a09aa.2b7ae8"
            ]
        ]
    },
    {
        "id": "a1d149c8.df9b88",
        "type": "http in",
        "z": "a7b9d689.b8a5e8",
        "name": "",
        "url": "/app",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 100,
        "y": 440,
        "wires": [
            [
                "f408ee76.4597e"
            ]
        ]
    },
    {
        "id": "bb0d6c04.0770f",
        "type": "template",
        "z": "a7b9d689.b8a5e8",
        "name": "HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <!--<meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">-->\n    <link rel=\"icon\" href=\"/img/favicon.ico?v=3\" type=\"image/x-icon\">\n    <title>Chill Detector</title>\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.css\">\n    <link rel=\"stylesheet\" href=\"/css/fontAwesome.css\">\n    <script src=\"/scripts/jquery.js\"></script>\n    <script src=\"/scripts/socketio.js\"></script>\n    <script type=\"text/javascript\" src=\"/scripts/visDist/vis.js\"></script>\n    <style>{{{payload.style}}}</style>\n    <script>{{{payload.script}}}</script>\n  </head>\n  <body>\n    {{{payload.navbar}}}\n    <div class=\"container-fluid spectrogram\" align=\"center\" id=\"spectrogram\"></div>\n    {{{payload.infobar}}}\n    <script src=\"/scripts/popper.js\"></script>\n    <script src=\"/scripts/bootstrap.js\"></script>\n  </body>\n</html>",
        "output": "str",
        "x": 830,
        "y": 440,
        "wires": [
            [
                "6b7d5262.946b9c"
            ]
        ]
    },
    {
        "id": "6b7d5262.946b9c",
        "type": "http response",
        "z": "a7b9d689.b8a5e8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 950,
        "y": 440,
        "wires": []
    },
    {
        "id": "f408ee76.4597e",
        "type": "template",
        "z": "a7b9d689.b8a5e8",
        "name": "CSS",
        "field": "payload.style",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": ":root {\n  --container-background-color: #557a95;\n  --container-title-color: #fdc300;\n  --container-text-color: #ffffff;\n  --background-color: #7395ae;\n  --sub-container-background-color: #c6c2bb;\n  --sub-container-title-color: #016a71;\n  --sub-container-text-color: #000000;\n}\nbody {\n  background-color: var(--background-color);\n  padding-left:25px;\n  padding-right:25px;\n}\n.linktext {\n  color: var(--container-title-color);\n  text-decoration: underline;\n}\n.linkicon {\n  padding: 20px;\n  color: var(--container-background-color);\n}\n\nimg {\n  object-fit: contain;\n}\n.col {\n  padding-bottom: 20px;\n}\n.jumbotron {\n  background-color: var(--container-background-color) !important;\n  color:var(--container-text-color);\n}\n.banner\n{\n  background-color: var(--container-background-color) !important;\n  color:var(--container-text-color);\n}\n.jumbotron-title\n{\n  color:var(--container-title-color);\n}\n.jumbotron-button\n{\n  color: var(--background-color);\n  background-color: var(--container-title-color);\n  font-weight: 900;\n  width : 80%;\n  font-size: x-large;\n}\n.featurette-heading\n{\n  color:var(--container-text-color);\n}\n.card\n{\n  background-color: var(--container-background-color);\n  text-align: center;\n  padding: 10px;\n}\n.card-body\n{\n  color: var(--sub-container-text-color);\n  background-color: var(--sub-container-background-color);\n}\n.card-button\n{\n  color: var(--container-title-color);\n  font-weight: bold;\n  background-color: var(--container-background-color);\n}\n.card-title\n{\n  color: var(--container-title-color);\n  font-weight: bold;\n}\n.card-major-bullet\n{\n  text-align: left;\n}\n.card1-minor-bullet\n{\n  text-align: left;\n}\n.card-minor-minor-bullet {\n\tfont-size: : small;\n  font-style:italic;\n}\n\n.card-text\n{\n  text-align: left;\n}\n.scrolling-wrapper {\n  width: 100%;left\n  display: inline-block;\n  overflow-x: scroll;\n  overflow-y: hidden;\n  white-space: nowrap;\n}\n.footer {\n/*   position: fixed; */\n   left: 0;\n   bottom: 0;\n   width: 100%;\n   color:var(--container-background-color);\n   background-color: var(--background-color);\n   text-align: center;\n}\n.img-max {\n  width: 99%;\n}\n.bot-pad\n{\n  padding-bottom: 20px;\n}\n.span-left-justify\n{\n  float:left;\n}\n.right-justify\n{\n  text-align: right;\n}\n.center-justify\n{\n  text-align: center;\n}\n.date\n{\n  color: var(--container-title-color);\n  font-weight: bold;\n}\n.spectrogram\n{\n  border-style:solid;\n  border-color: var(--container-title-color);\n}",
        "output": "str",
        "x": 270,
        "y": 440,
        "wires": [
            [
                "e2bc60bf.5c5a8"
            ]
        ]
    },
    {
        "id": "e2bc60bf.5c5a8",
        "type": "template",
        "z": "a7b9d689.b8a5e8",
        "name": "JavaScript",
        "field": "payload.script",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "var socket;\nvar graph3d = null;\nvar itimeSlice = 0;\nvar modeMax = 231;\nvar imodeConvFact = 222 / 256;\nvar timeMax = 2;\nvar oodataArray = [];\nvar timeStamp = [];\nvar deltaT = 0;\nvar freeze = false;\nvar mostExcitedMode = 0;\nvar mostExcitedModeAmp = 0;\nvar modeMin = 2;\nvar sliceViewActive = false;\nvar birdsEyeViewActive = false;\nvar topViewActive = false;\nvar birdsEyeTimeMax = 32; \n\nvar ws;\nvar retries = 0;\n\nvar threedPlotOptions = \n{\n    width: '850px',\n    height: '600px',\n    style: 'surface',\n    showPerspective: false,\n    showGrid: true,\n    showShadow: false,\n    keepAspectRatio: false,\n    verticalRatio: 0.6,\n    showZAxis: true,\n    xLabel: 'Hz',\n    yLabel: 'Time',\n    tooltip: true,\n    axisColor: '#ffffff',\n    zMin:0,\n    xMin: 0,\n    xMax: Math.round(imodeConvFact * modeMax),\n};\n\nfunction wsConnectC() \n{\n    var uri = window.location.href.split('://');\n    var wslead = 'ws://';\n    if (uri[0] == 'https') wslead = 'wss://';\n    ws = new WebSocket(wslead + uri[1] + '/websocket');\n    ws.onmessage = function(event) \n    {\n        var msg = JSON.parse(event.data);\n        switch(msg.topic) \n        {\n            case 'fftData':\n                addOoDataArrays(msg.payload);\n                break;\n            default:\n            // code block\n        }        \n    };\n    ws.onopen = function() \n    {   \n        console.log(\"Websocket connected\");\n    };\n    ws.onclose = function() \n    {\n    };\n}\n\n$( document ).ready(function()\n{\n  $(\"#freezeButton\").text('Running');\n  $(\"#plotslices\").val(timeMax.toString());\n  $(\"#maxFreq\").val(threedPlotOptions.xMax.toString());\n  $(\"#minFreq\").val(Math.round(imodeConvFact * modeMin).toString());\n  \n  drawSpectrogram();\n  \n  wsConnectC();\n  $(\"#maxFreq\").change(function()\n  {\n      threedPlotOptions.xMax = Number($(\"#maxFreq\").val());\n      modeMax = Math.round(threedPlotOptions.xMax / imodeConvFact);\n      graph3d.setOptions(threedPlotOptions);\n      oodataArray = [];\n      itimeSlice = 0;\n      initializeDataArray();\n      graph3d.redraw();\n  });\n  $(\"#minFreq\").change(function()\n  {\n      modeMin = Math.round(Number($(\"#minFreq\").val()) / imodeConvFact);\n  });\n  $(\"#plotslices\").change(function()\n  {\n    timeMax = Number($(\"#plotslices\").val());\n    if (timeMax < 2) \n    {\n        alert('Number of plot slices must be greater than 1');\n        timeMax = 2;\n    }\n    birdsEyeTimeMax = timeMax;\n    $(\"#plotslices\").val(timeMax.toString());\n    oodataArray = [];\n    itimeSlice = 0;\n    initializeDataArray();\n    graph3d.redraw();\n  });\n  \n});\n\nfunction initializeDataArray()\n{   \n  oodataArray = [];\n  for (var imode = 0; imode < modeMax; ++imode)\n  {\n    var value = 0.0;\n    oodataArray[imode] =\n    {\n      'x': imode * imodeConvFact,\n      'y': 0,\n      'z': value,\n      'style': value\n    };\n  }\n}\n\nfunction drawSpectrogram()\n{\n  var container = document.getElementById('spectrogram');\n  initializeDataArray();\n\n  graph3d = new vis.Graph3d(container, oodataArray, threedPlotOptions);\n  $(\"#startTime\").text(new Date().toLocaleString());\n  $(\"#stopTime\").text(new Date().toLocaleString());\n  graph3d.on('cameraPositionChange', onCameraPositionChange);\n//  graph3d.setSize('850px', '600px');\n  sliceView();\n}\n\nfunction addOoDataArrays(ooDataArrays)\n{\n  if (freeze) return;\n\n  for (var iz = 0; iz < modeMin; ++iz)\n  {\n      ooDataArrays.modeM[iz] = threedPlotOptions.zMin;\n  }\n\n  mostExcitedModeAmp = 0;\n  mostExcitedMode = 0;\n  for (var imode = 0; imode < modeMax; ++imode)\n  {\n      if (ooDataArrays.modeM[imode] < threedPlotOptions.zMin) ooDataArrays.modeM[imode] = threedPlotOptions.zMin;\n      if (mostExcitedModeAmp < ooDataArrays.modeM[imode])\n      {\n         mostExcitedModeAmp = ooDataArrays.modeM[imode];\n         mostExcitedMode = (imode) * imodeConvFact;\n      }\n  }\n  $(\"#maxMode\").text(Math.round(100 * mostExcitedMode) / 100);\n  $(\"#maxModeAmplitude\").text(Math.round(100 * mostExcitedModeAmp) / 100);\n\n  if (itimeSlice < timeMax)\n  {\n    timeStamp[itimeSlice] = new Date().getTime();\n    deltaT = (timeStamp[itimeSlice] - timeStamp[0]) / 1000;\n    for (var imode = 0; imode < modeMax; ++imode)\n    {\n      var value = Math.round(100.0 * Number(ooDataArrays.modeM[imode])) / 100.0;\n      oodataArray[itimeSlice * modeMax + imode] =\n      {\n        'x': (imode) * imodeConvFact,\n        'y': deltaT,\n        'z': value,\n        'style': value\n      };\n    }\n    ++itimeSlice;\n  }\n  else\n  {\n    for (var itime = 0; itime < (timeMax - 1); ++itime)\n    {\n      timeStamp[itime] = timeStamp[itime + 1];\n      deltaT = (timeStamp[itime] - timeStamp[0]) / 1000;\n      for (var imode = 0; imode < modeMax; ++imode)\n      {\n        oodataArray[itime * modeMax + imode] =\n        {\n          'x': oodataArray[(itime + 1) * modeMax + imode].x,\n          'y': deltaT,\n          'z': oodataArray[(itime + 1) * modeMax + imode].z,\n          'style': oodataArray[(itime + 1) * modeMax + imode].style\n        };\n      }\n    }\n    timeStamp[timeMax - 1] = new Date().getTime();\n    deltaT = (timeStamp[timeMax - 1] - timeStamp[0]) / 1000;\n    for (var imode = 0; imode < modeMax; ++imode)\n    {\n      var value = Math.round(100.0 * Number(ooDataArrays.modeM[imode])) / 100.0;\n      oodataArray[(timeMax - 1) * modeMax + imode] =\n      {\n        'x': (imode) * imodeConvFact,\n        'y': deltaT,\n        'z': value,\n        'style': value\n      };\n    }\n  }\n  $(\"#startTime\").text(new Date(timeStamp[0]).toLocaleString());\n  $(\"#stopTime\").text(new Date(timeStamp[itimeSlice - 1]).toLocaleString());\n  graph3d.setData(oodataArray);\n}\nfunction freezeRun()\n{\n  freeze = !freeze;\n  if (freeze)\n  {\n    $(\"#freezeButton\").text('Frozen');\n  }\n  else\n  {\n    $(\"#freezeButton\").text('Running');\n  }\n\n}\nfunction birdsEyeView()\n{\n  var horzAngle = 315.0 * 3.1415927 / 180.0;\n  var vertAngle = 45.0 * 3.1415927 / 180.0;\n  graph3d.setCameraPosition({'horizontal': horzAngle, 'vertical': vertAngle, 'distance': 2.0});\n  if (sliceViewActive)\n  {\n    timeMax =  birdsEyeTimeMax;   \n    $(\"#plotslices\").val(timeMax.toString());\n  }\n    sliceViewActive = false;\n    birdsEyeViewActive = true;\n    topViewActive = false;\n    \n}\nfunction sliceView()\n{\n  var horzAngle = 0.0 * 3.1415927 / 180.0;\n  var vertAngle = 0.0 * 3.1415927 / 180.0;\n  graph3d.setCameraPosition({'horizontal': horzAngle, 'vertical': vertAngle, 'distance': 1.1});\n  timeMax = 2;\n  $(\"#plotslices\").val(timeMax.toString());\n  oodataArray = [];\n  itimeSlice = 0;\n  initializeDataArray();\n  graph3d.redraw();\n  sliceViewActive = true;\n  birdsEyeViewActive = false;\n  topViewActive = false;\n\n}\nfunction topView()\n{\n  var horzAngle = 0 * 3.1415927 / 180.0;\n  var vertAngle = 90 * 3.1415927 / 180.0;\n  graph3d.setCameraPosition({'horizontal': horzAngle, 'vertical': vertAngle, 'distance': 2.0});\n  if (sliceViewActive)\n  {\n    timeMax =  birdsEyeTimeMax;   \n    $(\"#plotslices\").val(timeMax.toString());\n  }\n    sliceViewActive = false;\n    birdsEyeViewActive = false;\n    topViewActive = true;\n    \n}\nfunction onCameraPositionChange(event) \n{\n  if (sliceViewActive) sliceView();\n  if (birdsEyeViewActive) birdsEyeView();\n  if (topViewActive) topView();\n}\n",
        "output": "str",
        "x": 410,
        "y": 440,
        "wires": [
            [
                "d1b3cdc7.d6f86"
            ]
        ]
    },
    {
        "id": "d1b3cdc7.d6f86",
        "type": "template",
        "z": "a7b9d689.b8a5e8",
        "name": "NavBar",
        "field": "payload.navbar",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<div class=\"alert alert-success banner\" width=\"100%\">\n  <div class=\"row\">\n    <div class=\"col-md-2\" style=\"text-align: left\"><img src=\"/img/braincoolLogo.png\" height=\"50px\"/></div>\n    <div class=\"col-md-8\" style=\"text-align: center\">\n      <h1 class=\"display-5 jumbotron-title\">Chill Detector</h1>\n    </div>\n    <div class=\"col-md-2\" style=\"text-align: right\"><img src=\"/img/BlinkyLogo.gif\" height=\"50px\"/></div>\n  </div>\n</div>\n",
        "output": "str",
        "x": 560,
        "y": 440,
        "wires": [
            [
                "8d69cd3e.1e335"
            ]
        ]
    },
    {
        "id": "8d69cd3e.1e335",
        "type": "template",
        "z": "a7b9d689.b8a5e8",
        "name": "Info Bar",
        "field": "payload.infobar",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<div width=\"100%\">\n    <div class=\"row\"> \n        <div class=\"col-md-6\" align=\"center\" style=\"padding-top:10px;padding-bottom:10px;\">\n            <button class=\"btn jumbotron-button\" id=\"freezeButton\" type=\"button\" onclick=\"freezeRun()\"></button>\n        </div>\n        <div class=\"col-md-6\" align=\"center\" style=\"padding-top:10px;padding-bottom:10px;\">\n            <button class=\"btn jumbotron-button\" id=\"birdsEyeButton\" type=\"button\" onclick=\"birdsEyeView()\">Birds Eye</button>\n        </div>\n    </div>\n    <div class=\"row\"> \n        <div class=\"col-md-6\" align=\"center\" style=\"padding-top:10px;padding-bottom:10px;\">\n            <button class=\"btn jumbotron-button\" id=\"sliceViewButton\" type=\"button\" onclick=\"sliceView()\">Slice View</button>\n        </div>\n        <div class=\"col-md-6\" align=\"center\" style=\"padding-top:10px;padding-bottom:10px;\">\n            <button class=\"btn jumbotron-button\" id=\"sliceViewButton\" type=\"button\" onclick=\"topView()\">Top View</button>\n        </div>\n    </div>\n    <div class=\"row\"> \n        <div class=\"col-md-6\" align=\"right\" >\n            <span class=\"date\" style=\"font-size: x-large;\">Start Time</span>\n        </div>\n        <div class=\"col-md-6\">\n            <span class=\"date\"  style=\"font-size: x-large;\" id=\"startTime\"></span>\n        </div>\n    </div>\n    <div class=\"row\"> \n        <div class=\"col-md-6\"  align=\"right\">\n            <span class=\"date\" style=\"font-size: x-large;\">Stop Time</span>\n        </div>\n        <div class=\"col-md-6\">\n            <span class=\"date\" id=\"stopTime\" style=\"font-size: x-large;\"></span>\n        </div>\n    </div>\n    <div class=\"row\"> \n        <div class=\"col-md-6\" align=\"right\" >\n            <span class=\"date\" style=\"font-size: x-large;\">MaxFreq </span>\n        </div>\n        <div class=\"col-md-6\">\n            <span class=\"date\" id=\"maxMode\" style=\"font-size: x-large;\"></span>\n        </div>\n    </div>\n    <div class=\"row\"> \n         <div class=\"col-md-6\" align=\"right\" >\n            <span class=\"date\" style=\"font-size: x-large;\">Amplitude </span>\n        </div>\n        <div class=\"col-md-6\">\n            <span class=\"date\" id=\"maxModeAmplitude\" style=\"font-size: x-large;\"></span>\n        </div>\n    </div>\n    <div class=\"row\"> \n        <div class=\"col-md-3\" align=\"right\" >\n            <span class=\"date\" style=\"font-size: x-large;\">PlotSlices</span>\n        </div>\n        <div class=\"col-md-6\">\n            <input class=\"form-control center-justify\" id=\"plotslices\" type=\"text\" value=\"0\" style=\"font-size: x-large;\"/>\n        </div>\n    </div>\n    <div class=\"row\"> \n        <div class=\"col-md-3\" align=\"right\" >\n            <span class=\"date\" style=\"font-size: x-large;\">Low Freq</span>\n        </div>\n        <div class=\"col-md-6\">\n            <input class=\"form-control center-justify\" id=\"minFreq\" type=\"text\" value=\"0\" style=\"font-size: x-large;\"/>\n        </div>\n    </div>\n    <div class=\"row\"> \n        <div class=\"col-md-3\" align=\"right\" >\n            <span class=\"date\" style=\"font-size: x-large;\">Max Freq</span>\n        </div>\n        <div class=\"col-md-6\">\n            <input class=\"form-control center-justify\" id=\"maxFreq\" type=\"text\" value=\"0\" style=\"font-size: x-large;\"/>\n        </div>\n    </div>\n</div>\n",
        "output": "str",
        "x": 700,
        "y": 440,
        "wires": [
            [
                "bb0d6c04.0770f"
            ]
        ]
    },
    {
        "id": "ebe54e71.d9f81",
        "type": "websocket out",
        "z": "a7b9d689.b8a5e8",
        "name": "",
        "server": "9feed7f8.962788",
        "client": "",
        "x": 1200,
        "y": 220,
        "wires": []
    },
    {
        "id": "8bf276a.f678288",
        "type": "serial out",
        "z": "a7b9d689.b8a5e8",
        "name": "",
        "serial": "373e7d51.903ea2",
        "x": 480,
        "y": 320,
        "wires": []
    },
    {
        "id": "e3a916f6.e99d88",
        "type": "inject",
        "z": "a7b9d689.b8a5e8",
        "name": "",
        "topic": "",
        "payload": "1",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": "5",
        "x": 310,
        "y": 360,
        "wires": [
            [
                "8bf276a.f678288",
                "39db2d21.3c6d92"
            ]
        ]
    },
    {
        "id": "2af394dd.443cdc",
        "type": "function",
        "z": "a7b9d689.b8a5e8",
        "name": "Send 1",
        "func": "msg.payload = 1;\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 300,
        "y": 320,
        "wires": [
            [
                "8bf276a.f678288"
            ]
        ]
    },
    {
        "id": "9c4cbe2.b12974",
        "type": "function",
        "z": "a7b9d689.b8a5e8",
        "name": "Convert Bytes to Float",
        "func": "var npts = msg.payload.length / 8;\nvar buf = new ArrayBuffer(4);\nvar view = new DataView(buf);\nvar real = [];\nvar imag = [];\nfor (var ipt = 0; ipt < npts; ++ipt)\n{\n    for (ib = 0; ib < 4; ++ib) view.setUint8(ib, msg.payload[ipt * 4 + 3 - ib]);\n    real[ipt] = view.getFloat32(0);\n    for (ib = 0; ib < 4; ++ib) view.setUint8(ib, msg.payload[(ipt + npts) * 4 + 3 - ib]);\n    imag[ipt] = view.getFloat32(0);\n}\nreturn {'topic':'timeData', 'payload':{'real':real,'imag':imag}};\n",
        "outputs": 1,
        "noerr": 0,
        "x": 320,
        "y": 220,
        "wires": [
            [
                "c52ddcf3.2bc24",
                "e8d0cc13.f226"
            ]
        ]
    },
    {
        "id": "e51a09aa.2b7ae8",
        "type": "function",
        "z": "a7b9d689.b8a5e8",
        "name": "FFTMAG",
        "func": "var npts = msg.payload.real.length\nvar npts2 = npts / 2;\nvar fftmag = [];\nfor (ii = 0; ii < npts2; ++ii)\n{\n    var fftMagPlus = 0.0;\n    var fftMagMinus = 0.0;\n    fftMagMinus = fftMagMinus + msg.payload.real[npts - 1 - ii] * msg.payload.real[npts - 1 - ii];\n    fftMagMinus = fftMagMinus + msg.payload.imag[npts - 1 - ii] * msg.payload.imag[npts - 1 - ii];\n    fftMagMinus = 1000.0 * Math.sqrt(fftMagMinus);\n    fftMagPlus = fftMagPlus + msg.payload.real[ii] * msg.payload.real[ii];\n    fftMagPlus = fftMagPlus + msg.payload.imag[ii] * msg.payload.imag[ii];\n    fftMagPlus = 1000.0 * Math.sqrt(fftMagPlus);\n    fftmag[ii] = (fftMagMinus + fftMagPlus) / 2;\n}\nreturn {'topic':'fftData','payload':{'modeM':fftmag}};",
        "outputs": 1,
        "noerr": 0,
        "x": 960,
        "y": 220,
        "wires": [
            [
                "ebe54e71.d9f81"
            ]
        ]
    },
    {
        "id": "615467a4.754678",
        "type": "debug",
        "z": "a7b9d689.b8a5e8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "x": 770,
        "y": 300,
        "wires": []
    },
    {
        "id": "c52ddcf3.2bc24",
        "type": "function",
        "z": "a7b9d689.b8a5e8",
        "name": "Get DC Values",
        "func": "var npts = msg.payload.real.length;\nvar real = 0.0;\nvar imag = 0.0;\nfor (ii = 0; ii < npts; ++ii)\n{\n    real = real + msg.payload.real[ii];\n    imag = imag + msg.payload.imag[ii];\n}\nreal =  real / npts;\nimag =  imag / npts;\nreturn [{'topic':'real','payload':real},{'topic':'imag','payload':imag}];",
        "outputs": 2,
        "noerr": 0,
        "x": 580,
        "y": 280,
        "wires": [
            [],
            []
        ]
    },
    {
        "id": "39db2d21.3c6d92",
        "type": "function",
        "z": "a7b9d689.b8a5e8",
        "name": "blank chart",
        "func": "msg.payload = [];\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "x": 490,
        "y": 380,
        "wires": [
            []
        ]
    },
    {
        "id": "e8d0cc13.f226",
        "type": "function",
        "z": "a7b9d689.b8a5e8",
        "name": "BoxCar Time Data",
        "func": "if (msg.topic != 'timeData')\n{\n    context.set(msg.topic, msg.payload);\n    context.set('bufferPointer', -1);\n    return null;\n}\nvar numOfBuffers = context.get('numOfBuffers');\nif (numOfBuffers == undefined) return null;\nvar ptsPerBuffer = context.get('ptsPerBuffer');\nif (ptsPerBuffer == undefined) return null;\nvar bufferPointer = context.get('bufferPointer');\nif (bufferPointer < 0)\n{\n    bufferPointer = 0;\n    var  bufferData = [];\n    for (var ibuf = 0; ibuf < numOfBuffers; ++ibuf)\n    {\n        var real = [];\n        var imag = [];\n        for (var ipt = 0; ipt < ptsPerBuffer; ++ipt)\n        {\n            real[ipt] = 0;\n            imag[ipt] = 0;\n        }\n        bufferData[ibuf] = {'real':real, 'imag':imag};\n    }\n    context.set('bufferData', bufferData);\n}\nvar bufferData = context.get('bufferData');\nfor (var ipt = 0; ipt < ptsPerBuffer; ++ipt)\n{\n    bufferData[bufferPointer].real[ipt] = msg.payload.real[ipt];\n    bufferData[bufferPointer].imag[ipt] = msg.payload.imag[ipt];\n}\n++bufferPointer;\nif (bufferPointer == numOfBuffers) bufferPointer = 0;\ncontext.set('bufferPointer', bufferPointer);\ncontext.set('bufferData', bufferData);\n\nvar real = [];\nvar imag = [];\nfor (var ibuf = 0; ibuf < numOfBuffers; ++ibuf)\n{\n    for (var ipt = 0; ipt < ptsPerBuffer; ++ipt)\n    {\n        real[ibuf * ptsPerBuffer + ipt] = bufferData[bufferPointer].real[ipt];\n        imag[ibuf * ptsPerBuffer + ipt] = bufferData[bufferPointer].imag[ipt];\n    }\n    ++bufferPointer;\n    if (bufferPointer == numOfBuffers) bufferPointer = 0;\n}\n\nreturn {topic:msg.topic, payload:{'real':real,'imag':imag}};\n\n",
        "outputs": 1,
        "noerr": 0,
        "x": 590,
        "y": 220,
        "wires": [
            [
                "4701c7b6.e07908"
            ]
        ]
    },
    {
        "id": "5df4dd95.1d8d24",
        "type": "inject",
        "z": "a7b9d689.b8a5e8",
        "name": "numOfBuffers",
        "topic": "numOfBuffers",
        "payload": "4",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 340,
        "y": 120,
        "wires": [
            [
                "e8d0cc13.f226"
            ]
        ]
    },
    {
        "id": "57d7fb1b.865524",
        "type": "inject",
        "z": "a7b9d689.b8a5e8",
        "name": "ptsPerBuffer",
        "topic": "ptsPerBuffer",
        "payload": "128",
        "payloadType": "num",
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "x": 350,
        "y": 160,
        "wires": [
            [
                "e8d0cc13.f226"
            ]
        ]
    }
]