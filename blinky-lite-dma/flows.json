[
    {
        "id": "a7b9d689.b8a5e8",
        "type": "tab",
        "label": "Flow1",
        "disabled": false,
        "info": ""
    },
    {
        "id": "6ad7c930.1a06b8",
        "type": "ui_base",
        "theme": {
            "name": "theme-dark",
            "lightTheme": {
                "default": "#0094CE",
                "baseColor": "#0094CE",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "darkTheme": {
                "default": "#097479",
                "baseColor": "#097479",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif",
                "edited": true,
                "reset": false
            },
            "customTheme": {
                "name": "Untitled Theme 1",
                "default": "#4B7930",
                "baseColor": "#4B7930",
                "baseFont": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
            },
            "themeState": {
                "base-color": {
                    "default": "#097479",
                    "value": "#097479",
                    "edited": false
                },
                "page-titlebar-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "page-backgroundColor": {
                    "value": "#111111",
                    "edited": false
                },
                "page-sidebar-backgroundColor": {
                    "value": "#000000",
                    "edited": false
                },
                "group-textColor": {
                    "value": "#0eb8c0",
                    "edited": false
                },
                "group-borderColor": {
                    "value": "#555555",
                    "edited": false
                },
                "group-backgroundColor": {
                    "value": "#333333",
                    "edited": false
                },
                "widget-textColor": {
                    "value": "#eeeeee",
                    "edited": false
                },
                "widget-backgroundColor": {
                    "value": "#097479",
                    "edited": false
                },
                "widget-borderColor": {
                    "value": "#333333",
                    "edited": false
                },
                "base-font": {
                    "value": "-apple-system,BlinkMacSystemFont,Segoe UI,Roboto,Oxygen-Sans,Ubuntu,Cantarell,Helvetica Neue,sans-serif"
                }
            }
        },
        "site": {
            "name": "Blinky-Lite-Tutorial",
            "hideToolbar": "false",
            "allowSwipe": "false",
            "dateFormat": "DD/MM/YYYY",
            "sizes": {
                "sx": 48,
                "sy": 48,
                "gx": 6,
                "gy": 6,
                "cx": 6,
                "cy": 6,
                "px": 0,
                "py": 0
            }
        }
    },
    {
        "id": "5c27d05d.e787b",
        "type": "ui_tab",
        "z": "",
        "name": "Blinky-Lite-Tutorial",
        "icon": "dashboard"
    },
    {
        "id": "373e7d51.903ea2",
        "type": "serial-port",
        "z": "",
        "serialport": "/dev/ttyS0",
        "serialbaud": "115200",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": true,
        "responsetimeout": "10000"
    },
    {
        "id": "65e743b1.3be17c",
        "type": "serial in",
        "z": "a7b9d689.b8a5e8",
        "name": "Teensy",
        "serial": "373e7d51.903ea2",
        "x": 210,
        "y": 80,
        "wires": [
            [
                "12dda574.6ef3ab"
            ]
        ]
    },
    {
        "id": "baa6355b.d0e2a8",
        "type": "debug",
        "z": "a7b9d689.b8a5e8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 890,
        "y": 80,
        "wires": []
    },
    {
        "id": "12dda574.6ef3ab",
        "type": "function",
        "z": "a7b9d689.b8a5e8",
        "name": "Fill Data Array",
        "func": "var timeStamp = context.get('timeStamp') || new Date().getTime();\nvar timeData = context.get('timeData') || {'arrayPointer':-1, 'dataArray':[], 'nmax':256, 'nsamples':-1};\nif (timeData.arrayPointer < 0)\n{\n    timeData.arrayPointer = 0;\n    for (var ii = 0; ii < timeData.nmax; ++ii)\n    {\n        timeData.dataArray[ii] = [];\n        for (var ij = 0; ij < 2; ++ij)\n        {\n            timeData.dataArray[ii][ij] = 0.0;\n        }\n    }\n    context.set('timeData', timeData);\n}\nvar inputDataString = msg.payload.split('\\n')[0].split(',');\nif (inputDataString[0] == '*')\n{\n    timeData.arrayPointer = -1;  \n    timeData.nsamples = Number(inputDataString[1]);\n    context.set('timeData', timeData);\n    return null;\n}\nfor (var ii = 0; ii < 2; ++ii)\n{\n    timeData.dataArray[timeData.arrayPointer][ii] = Number(inputDataString[ii]);\n}\nvar newMsg1 = null;\nvar newMsg2 = null;\n++timeData.arrayPointer;\nif (timeData.arrayPointer == timeData.nmax)\n{\n    var now = new Date().getTime();\n    var real = [];\n    var imag = [];\n    for (var ii = 0; ii < timeData.nmax; ++ii)\n    {\n        real[ii] = timeData.dataArray[ii][0];\n        imag[ii] = timeData.dataArray[ii][1];\n    }\n    newMsg1 = \n    {\n        'topic':'timeData', \n        'payload':\n        {\n            'real':real,\n            'imag':imag\n        }\n    };\n    newMsg2 = \n    {\n        'topic':'extraInfo', \n        'payload':\n        {\n            'deltaT': now - timeStamp,\n            'nsamples': timeData.nsamples\n        }\n    };\n    timeData.arrayPointer = 0;\n    context.set('timeStamp',now);\n    \n}\ncontext.set('timeData', timeData);\nreturn [newMsg1,newMsg2];",
        "outputs": 2,
        "noerr": 0,
        "x": 430,
        "y": 80,
        "wires": [
            [
                "4701c7b6.e07908"
            ],
            []
        ]
    },
    {
        "id": "4701c7b6.e07908",
        "type": "function",
        "z": "a7b9d689.b8a5e8",
        "name": "FFT",
        "func": "transformRadix2(msg.payload.real, msg.payload.imag)\nreturn msg;\n/* https://www.nayuki.io/res/free-small-fft-in-multiple-languages/fft.js\n * Computes the discrete Fourier transform (DFT) of the given complex vector, storing the result back into the vector.\n * The vector's length must be a power of 2. Uses the Cooley-Tukey decimation-in-time radix-2 algorithm.\n */\nfunction transformRadix2(real, imag) {\n\t// Length variables\n\tvar n = real.length;\n\tif (n != imag.length)\n\t\tthrow \"Mismatched lengths\";\n\tif (n == 1)  // Trivial transform\n\t\treturn;\n\tvar levels = -1;\n\tfor (var i = 0; i < 32; i++) {\n\t\tif (1 << i == n)\n\t\t\tlevels = i;  // Equal to log2(n)\n\t}\n\tif (levels == -1)\n\t\tthrow \"Length is not a power of 2\";\n\t\n\t// Trigonometric tables\n\tvar cosTable = new Array(n / 2);\n\tvar sinTable = new Array(n / 2);\n\tfor (var i = 0; i < n / 2; i++) {\n\t\tcosTable[i] = Math.cos(2 * Math.PI * i / n);\n\t\tsinTable[i] = Math.sin(2 * Math.PI * i / n);\n\t}\n\t\n\t// Bit-reversed addressing permutation\n\tfor (var i = 0; i < n; i++) {\n\t\tvar j = reverseBits(i, levels);\n\t\tif (j > i) {\n\t\t\tvar temp = real[i];\n\t\t\treal[i] = real[j];\n\t\t\treal[j] = temp;\n\t\t\ttemp = imag[i];\n\t\t\timag[i] = imag[j];\n\t\t\timag[j] = temp;\n\t\t}\n\t}\n\t\n\t// Cooley-Tukey decimation-in-time radix-2 FFT\n\tfor (var size = 2; size <= n; size *= 2) {\n\t\tvar halfsize = size / 2;\n\t\tvar tablestep = n / size;\n\t\tfor (var i = 0; i < n; i += size) {\n\t\t\tfor (var j = i, k = 0; j < i + halfsize; j++, k += tablestep) {\n\t\t\t\tvar l = j + halfsize;\n\t\t\t\tvar tpre =  real[l] * cosTable[k] + imag[l] * sinTable[k];\n\t\t\t\tvar tpim = -real[l] * sinTable[k] + imag[l] * cosTable[k];\n\t\t\t\treal[l] = real[j] - tpre;\n\t\t\t\timag[l] = imag[j] - tpim;\n\t\t\t\treal[j] += tpre;\n\t\t\t\timag[j] += tpim;\n\t\t\t}\n\t\t}\n\t}\n\t\n\t// Returns the integer whose value is the reverse of the lowest 'bits' bits of the integer 'x'.\n\tfunction reverseBits(x, bits) {\n\t\tvar y = 0;\n\t\tfor (var i = 0; i < bits; i++) {\n\t\t\ty = (y << 1) | (x & 1);\n\t\t\tx >>>= 1;\n\t\t}\n\t\treturn y;\n\t}\n}\n",
        "outputs": 1,
        "noerr": 0,
        "x": 610,
        "y": 80,
        "wires": [
            [
                "5b89a0d1.21fc"
            ]
        ]
    },
    {
        "id": "612f662.cd80298",
        "type": "debug",
        "z": "a7b9d689.b8a5e8",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "false",
        "x": 530,
        "y": 320,
        "wires": []
    },
    {
        "id": "5b89a0d1.21fc",
        "type": "function",
        "z": "a7b9d689.b8a5e8",
        "name": "FFT MAG",
        "func": "var mag = [];\nfor (var ii = 0; ii < msg.payload.real.length / 2; ++ii)\n{\n    mag[ii] = Math.sqrt(msg.payload.real[ii] * msg.payload.real[ii] + msg.payload.imag[ii] * msg.payload.imag[ii]);\n    mag[ii] = mag[ii] / (msg.payload.real.length / 2);\n}\nreturn {'topic':msg.topic, 'payload':mag};",
        "outputs": 1,
        "noerr": 0,
        "x": 740,
        "y": 80,
        "wires": [
            []
        ]
    },
    {
        "id": "20a9dc9a.353764",
        "type": "function",
        "z": "a7b9d689.b8a5e8",
        "name": "FFT Test",
        "func": "var real = [];\nvar imag = [];\nvar twoPi = 2.0 * Math.PI;\nvar mode = 10.0\nvar npts = 128;\nfor (var ii = 0; ii < npts; ++ii)\n{\n   real[ii] = Math.cos(twoPi * mode * ii / npts) ;\n   imag[ii] = 0;\n}\nreturn {'topic':'testFft', 'payload':{'real':real, 'imag':imag}};",
        "outputs": 1,
        "noerr": 0,
        "x": 360,
        "y": 320,
        "wires": [
            [
                "612f662.cd80298"
            ]
        ]
    },
    {
        "id": "e3552659.892038",
        "type": "inject",
        "z": "a7b9d689.b8a5e8",
        "name": "",
        "topic": "",
        "payload": "",
        "payloadType": "date",
        "repeat": "",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "x": 180,
        "y": 320,
        "wires": [
            [
                "20a9dc9a.353764"
            ]
        ]
    },
    {
        "id": "a1d149c8.df9b88",
        "type": "http in",
        "z": "a7b9d689.b8a5e8",
        "name": "",
        "url": "/",
        "method": "get",
        "upload": false,
        "swaggerDoc": "",
        "x": 130,
        "y": 460,
        "wires": [
            [
                "f408ee76.4597e"
            ]
        ]
    },
    {
        "id": "bb0d6c04.0770f",
        "type": "template",
        "z": "a7b9d689.b8a5e8",
        "name": "HTML",
        "field": "payload",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<!DOCTYPE html>\n<html lang=\"en\">\n  <head>\n    <meta charset=\"UTF-8\">\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1, shrink-to-fit=no\">\n    <link rel=\"icon\" href=\"/img/favicon.ico?v=3\" type=\"image/x-icon\">\n    <title>Chill Detector</title>\n    <link rel=\"stylesheet\" href=\"/css/bootstrap.css\">\n    <link rel=\"stylesheet\" href=\"/css/fontAwesome.css\">\n    <script src=\"/scripts/jquery.js\"></script>\n    <script src=\"/scripts/socketio.js\"></script>\n    <script type=\"text/javascript\" src=\"/scripts/visDist/vis.js\"></script>\n    <style>{{{payload.style}}}</style>\n    <script>{{{payload.script}}}</script>\n  </head>\n  <body>\n    {{{payload.navbar}}}\n    {{{payload.infobar}}}\n    <div class=\"container spectrogram\" id=\"spectrogram\"></div>\n    <script src=\"/scripts/popper.js\"></script>\n    <script src=\"/scripts/bootstrap.js\"></script>\n  </body>\n</html>",
        "output": "str",
        "x": 810,
        "y": 460,
        "wires": [
            [
                "6b7d5262.946b9c"
            ]
        ]
    },
    {
        "id": "6b7d5262.946b9c",
        "type": "http response",
        "z": "a7b9d689.b8a5e8",
        "name": "",
        "statusCode": "",
        "headers": {},
        "x": 930,
        "y": 460,
        "wires": []
    },
    {
        "id": "f408ee76.4597e",
        "type": "template",
        "z": "a7b9d689.b8a5e8",
        "name": "CSS",
        "field": "payload.style",
        "fieldType": "msg",
        "format": "css",
        "syntax": "mustache",
        "template": ":root {\n  --container-background-color: #d99114;\n  --container-title-color: #016a71;\n  --container-text-color: #ffffff;\n  --background-color: #9e988e;\n  --sub-container-background-color: #c6c2bb;\n  --sub-container-title-color: #016a71;\n  --sub-container-text-color: #000000;\n}\nbody {\n  background-color: var(--background-color);\n  padding-left:25px;\n  padding-right:25px;\n}\n.linktext {\n  color: var(--container-title-color);\n  text-decoration: underline;\n}\n.linkicon {\n  padding: 20px;\n  color: var(--container-background-color);\n}\n\nimg {\n  object-fit: contain;\n}\n.col {\n  padding-bottom: 20px;\n}\n.jumbotron {\n  background-color: var(--container-background-color) !important;\n  color:var(--container-text-color);\n}\n.banner\n{\n  background-color: var(--container-background-color) !important;\n  color:var(--container-text-color);\n}\n.jumbotron-title\n{\n  color:var(--container-title-color);\n}\n.jumbotron-button\n{\n  color: var(--background-color);\n  background-color: var(--container-title-color);\n  font-weight: 900;\n}\n.featurette-heading\n{\n  color:var(--container-text-color);\n}\n.card\n{\n  background-color: var(--container-background-color);\n  text-align: center;\n  padding: 10px;\n}\n.card-body\n{\n  color: var(--sub-container-text-color);\n  background-color: var(--sub-container-background-color);\n}\n.card-button\n{\n  color: var(--container-title-color);\n  font-weight: bold;\n  background-color: var(--container-background-color);\n}\n.card-title\n{\n  color: var(--container-title-color);\n  font-weight: bold;\n}\n.card-major-bullet\n{\n  text-align: left;\n}\n.card1-minor-bullet\n{\n  text-align: left;\n}\n.card-minor-minor-bullet {\n\tfont-size: : small;\n  font-style:italic;\n}\n\n.card-text\n{\n  text-align: left;\n}\n.scrolling-wrapper {\n  width: 100%;left\n  display: inline-block;\n  overflow-x: scroll;\n  overflow-y: hidden;\n  white-space: nowrap;\n}\n.footer {\n/*   position: fixed; */\n   left: 0;\n   bottom: 0;\n   width: 100%;\n   color:var(--container-background-color);\n   background-color: var(--background-color);\n   text-align: center;\n}\n.img-max {\n  width: 99%;\n}\n.bot-pad\n{\n  padding-bottom: 20px;\n}\n.span-left-justify\n{\n  float:left;\n}\n.right-justify\n{\n  text-align: right;\n}\n.center-justify\n{\n  text-align: center;\n}\n.date\n{\n  color: var(--container-title-color);\n  font-weight: bold;\n}\n.spectrogram\n{\n  border-style:solid;\n  border-color: var(--container-title-color);\n}",
        "output": "str",
        "x": 250,
        "y": 460,
        "wires": [
            [
                "e2bc60bf.5c5a8"
            ]
        ]
    },
    {
        "id": "e2bc60bf.5c5a8",
        "type": "template",
        "z": "a7b9d689.b8a5e8",
        "name": "JavaScript",
        "field": "payload.script",
        "fieldType": "msg",
        "format": "javascript",
        "syntax": "mustache",
        "template": "var socket;\nvar graph3d = null;\nvar itimeSlice = 0;\nvar modeMax = 88;\nvar timeMax = 150;\nvar oodataArray = [];\nvar timeStamp = [];\nvar deltaT = 0;\nvar freeze = false;\nvar audioAlarm = new Audio('/audio/alarm.ogg');\nvar alarmOn = false;\nvar alarmThreshold = 20.0;\n\n$( document ).ready(function()\n{\n  $(\"#freezeButton\").text('Running');\n  $(\"#alarmButton\").text('Alarm OFF');\n  $(\"#alarmThreshold\").val(alarmThreshold.toString());\n  drawSpectrogram();\n  socket = io.connect(window.location.href);\n  socket.on('connect', function(data) {socket.emit('join', 'Socket Connection from index page established.');});\n  socket.on('ooDataArrays', function(data) {if (!freeze) addOoDataArrays(data);});\n  socket.on('ooDataGlobal', function(data) {if (!freeze) addOoGlobalData(data);});\n  socket.on('ooSetProcessing', function(data) {if (!freeze) addOoSetProcessing(data);});\n  $(\"#alarmThreshold\").change(function(){alarmThreshold = Number($(\"#alarmThreshold\").val());});\n\n});\n\nfunction initializeDataArray()\n{\n  for (var imode = 0; imode < modeMax; ++imode)\n  {\n    var value = 0.0;\n    oodataArray[imode] =\n    {\n      'x': imode,\n      'y': 0,\n      'z': value,\n      'style': value\n    };\n  }\n}\n\nfunction drawSpectrogram()\n{\n\n  // specify options\n  var options = {\n    width:  '100%',\n    height: '1000px',\n    style: 'surface',\n    showPerspective: false,\n    showGrid: true,\n    showShadow: false,\n    keepAspectRatio: false,\n    verticalRatio: 1.0,\n    showZAxis: true,\n    yCenter: '50%',\n    xLabel: 'Mode',\n    yLabel: 'Time (sec)',\n    zLabel: 'Phase (psec)',\n    tooltip: true,\n    axisColor: '#ffffff'\n  };\n\n  // create a graph3d\n  var container = document.getElementById('spectrogram');\n  initializeDataArray();\n\n  graph3d = new vis.Graph3d(container, oodataArray, options);\n  var horzAngle = 315.0 * 3.1415927 / 180.0;\n  var vertAngle = 45.0 * 3.1415927 / 180.0;\n  graph3d.setCameraPosition({'horizontal': horzAngle, 'vertical': vertAngle, 'distance': 2.0});\n  $(\"#startTime\").text(new Date().toLocaleString());\n  $(\"#stopTime\").text(new Date().toLocaleString());\n}\n\nfunction addOoDataArrays(ooDataArrays)\n{\n  if (itimeSlice < timeMax)\n  {\n    timeStamp[itimeSlice] = new Date().getTime();3\n    deltaT = (timeStamp[itimeSlice] - timeStamp[0]) / 1000;\n    for (var imode = 0; imode < modeMax; ++imode)\n    {\n      var value = Math.round(100.0 * Number(ooDataArrays.modeM[imode])) / 100.0;\n      oodataArray[itimeSlice * modeMax + imode] =\n      {\n        'x': imode,\n        'y': deltaT,\n        'z': value,\n        'style': value\n      };\n    }\n    ++itimeSlice;\n  }\n  else\n  {\n    for (var itime = 0; itime < (timeMax - 1); ++itime)\n    {\n      timeStamp[itime] = timeStamp[itime + 1];\n      deltaT = (timeStamp[itime] - timeStamp[0]) / 1000;\n      for (var imode = 0; imode < modeMax; ++imode)\n      {\n        oodataArray[itime * modeMax + imode] =\n        {\n          'x': oodataArray[(itime + 1) * modeMax + imode].x,\n          'y': deltaT,\n          'z': oodataArray[(itime + 1) * modeMax + imode].z,\n          'style': oodataArray[(itime + 1) * modeMax + imode].style\n        };\n      }\n    }\n    timeStamp[timeMax - 1] = new Date().getTime();\n    deltaT = (timeStamp[timeMax - 1] - timeStamp[0]) / 1000;\n    for (var imode = 0; imode < modeMax; ++imode)\n    {\n      var value = Math.round(100.0 * Number(ooDataArrays.modeM[imode])) / 100.0;\n      oodataArray[(timeMax - 1) * modeMax + imode] =\n      {\n        'x': imode,\n        'y': deltaT,\n        'z': value,\n        'style': value\n      };\n    }\n  }\n  $(\"#startTime\").text(new Date(timeStamp[0]).toLocaleString());\n  $(\"#stopTime\").text(new Date(timeStamp[itimeSlice - 1]).toLocaleString());\n  //calculateBeamCurrent(oodata);\n  //calculateAvgPhase(oodata);\n  graph3d.setData(oodataArray);\n}\nfunction addOoGlobalData(ooDataGlobal)\n{\n  $(\"#beamCurrent\").text(ooDataGlobal.beamCurrent.toString() + ' mA');\n  $(\"#avgPhase\").text(ooDataGlobal.avgPhase.toString() + ' pS');\n  $(\"#rmsPhase\").text(ooDataGlobal.rmsModeAmp.toString() + ' pS');\n  $(\"#maxMode\").text(ooDataGlobal.maxDipoleMode);\n  $(\"#maxModeAmplitude\").text(ooDataGlobal.maxDipoleModeAmp + ' pS');\n  if (alarmOn)\n  {\n    if (Number(ooDataGlobal.maxDipoleModeAmp) > alarmThreshold)\n    {\n      audioAlarm.play();\n      $(\"#spectrogram\").css('background','#ff0000');\n    }\n    else\n    {\n      $(\"#spectrogram\").css('background','#7a7a7a');\n    }\n  }\n}\nfunction addOoSetProcessing(ooSetProcessing)\n{\n  var avgType = 'Linear';\n  if (!ooSetProcessing.linearWeight) avgType = 'Quadratic';\n  $(\"#avgType\").text(avgType);\n  $(\"#numAvgs\").text(ooSetProcessing.numberOfSamples.toString());\n}\nfunction calculateAvgPhase(oodata)\n{\n  var avgPhase = 0.0;\n  for (var ii = 0; ii < 176; ++ii)\n  {\n    avgPhase = avgPhase + Number(oodata[9].payload[ii]);\n  }\n  avgPhase = Math.round(100.0 * avgPhase / 176.0) / 100.0;\n  $(\"#avgPhase\").text(avgPhase.toString() + ' pS');\n}\nfunction freezeRun()\n{\n  freeze = !freeze;\n  if (freeze)\n  {\n    $(\"#freezeButton\").text('Frozen');\n  }\n  else\n  {\n    $(\"#freezeButton\").text('Running');\n  }\n\n}\nfunction toggleAlarm()\n{\n  alarmOn = !alarmOn;\n  if (alarmOn)\n  {\n    $(\"#alarmButton\").text('Alarm ON');\n  }\n  else\n  {\n    $(\"#alarmButton\").text('Alarm OFF');\n    $(\"#spectrogram\").css('background','#7a7a7a');\n  }\n\n}",
        "output": "str",
        "x": 390,
        "y": 460,
        "wires": [
            [
                "d1b3cdc7.d6f86"
            ]
        ]
    },
    {
        "id": "d1b3cdc7.d6f86",
        "type": "template",
        "z": "a7b9d689.b8a5e8",
        "name": "NavBar",
        "field": "payload.navbar",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<div class=\"alert alert-success banner\" width=\"100%\">\n  <div class=\"row\">\n    <div class=\"col-md-2\"><img src=\"/img/TQG_text_logo.png\" height=\"50px\"/></div>\n    <div class=\"col-md-8\" style=\"text-align: center\">\n      <h1 class=\"display-5 jumbotron-title\">Chill Detector</h1>\n    </div>\n    <div class=\"col-md-2\" style=\"text-align: right\"><img src=\"/img/BlinkyLogo-Text.png\" height=\"50px\"/></div>\n  </div>\n</div>\n",
        "output": "str",
        "x": 540,
        "y": 460,
        "wires": [
            [
                "8d69cd3e.1e335"
            ]
        ]
    },
    {
        "id": "8d69cd3e.1e335",
        "type": "template",
        "z": "a7b9d689.b8a5e8",
        "name": "Info Bar",
        "field": "payload.infobar",
        "fieldType": "msg",
        "format": "handlebars",
        "syntax": "mustache",
        "template": "<div width=\"100%\">\n  <div class=\"row\"> \n    <div class=\"col-md-1\">\n      <button class=\"btn jumbotron-button\" id=\"freezeButton\" type=\"button\" onclick=\"freezeRun()\"></button>\n    </div>\n    <div class=\"col-md-4\">\n      <div class=\"row\"> \n        <div class=\"col-md-4\"><span class=\"date\">Start time </span></div>\n        <div class=\"col-md-8\"><span class=\"date\" id=\"startTime\"> </span></div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-4\"><span class=\"date\">Stop time</span></div>\n        <div class=\"col-md-8\"><span class=\"date\" id=\"stopTime\"> </span></div>\n      </div>\n    </div>\n    <div class=\"col-md-4\">\n      <div class=\"row\"> \n        <div class=\"col-md-3\"><span class=\"date\">Max Mode </span></div>\n        <div class=\"col-md-9\"><span class=\"date\" id=\"maxMode\"></span></div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-3\"><span class=\"date\">Amplitude</span></div>\n        <div class=\"col-md-9\"><span class=\"date\" id=\"maxModeAmplitude\"></span></div>\n      </div>\n    </div>\n    <div class=\"col-md-3\">\n      <div class=\"row\"> \n        <div class=\"col-md-6\"><span class=\"date\">Beam Current </span></div>\n        <div class=\"col-md-6\"><span class=\"date\" id=\"beamCurrent\"></span></div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col-md-6\"><span class=\"date\">Avg. Phase</span></div>\n        <div class=\"col-md-6\"><span class=\"date\" id=\"avgPhase\"></span></div>\n      </div>\n    </div>\n  </div>\n  <div class=\"row bot-pad\">\n    <div class=\"col-md-1\">\n      <button class=\"btn jumbotron-button\" id=\"alarmButton\" type=\"button\" onclick=\"toggleAlarm()\"></button>\n    </div>\n    <div class=\"col-md-4\">\n      <div class=\"row\">\n        <div class=\"col-md-4\" style=\"padding-top: 7px\"><span class=\"date\">Alarm Level</span></div>\n        <div class=\"col-md-4\">\n          <input class=\"form-control center-justify\" id=\"alarmThreshold\" type=\"text\" value=\"0\"/>\n        </div>\n        <div class=\"col-md-4\" style=\"padding-top: 7px\"><span class=\"date\">pS</span></div>\n      </div>\n    </div>\n    <div class=\"col-md-4\">\n      <div class=\"row\"> \n        <div class=\"col-md-3\"><span class=\"date\">Average Type </span></div>\n        <div class=\"col-md-9\"><span class=\"date\" id=\"avgType\"></span></div>\n      </div>\n      <div class=\"row\"> \n        <div class=\"col-md-3\"><span class=\"date\">No. Avgs </span></div>\n        <div class=\"col-md-9\"><span class=\"date\" id=\"numAvgs\"></span></div>\n      </div>\n    </div>\n    <div class=\"col-md-3\">\n      <div class=\"row\"> \n        <div class=\"col-md-6\"><span class=\"date\">RMS Phase </span></div>\n        <div class=\"col-md-6\"><span class=\"date\" id=\"rmsPhase\"></span></div>\n      </div>\n    </div>\n  </div>\n</div>\n",
        "output": "str",
        "x": 680,
        "y": 460,
        "wires": [
            [
                "bb0d6c04.0770f"
            ]
        ]
    }
]